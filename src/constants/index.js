const loadTicketsFromLocalStorage = () => {
  try {
    const serializedTickets = localStorage.getItem("tickets");
    return serializedTickets ? JSON.parse(serializedTickets) : [];
  } catch (error) {
    console.error("Failed to load tickets:", error);
    return [];
  }
};

export const initialState = {
  currentStep: !isNaN(parseInt(localStorage.currentStep))
    ? parseInt(localStorage.currentStep)
    : 1,
  ticketQuantity: !isNaN(parseInt(localStorage.ticketQuantity))
    ? parseInt(localStorage.ticketQuantity)
    : 1,
  ticketType: localStorage.ticketType || "Regular",
  name: localStorage.name || "",
  email: localStorage.email || "",
  specialRequest: localStorage.specialRequest || "",
  imageLink: localStorage.imageLink || null,
  imageError: localStorage.imageError || null,
  nameError: localStorage.nameError || null,
  emailError: localStorage.emailError || null,
  loadingMessage: null,
  clickedButtonId: !isNaN(parseInt(localStorage.clickedButtonId))
    ? parseInt(localStorage.clickedButtonId)
    : 1,
  tickets: loadTicketsFromLocalStorage(),
  regularTicketsLeft: !isNaN(parseInt(localStorage.regularTicketsLeft))
    ? parseInt(localStorage.regularTicketsLeft)
    : 20,
  VIPTicketsLeft: !isNaN(parseInt(localStorage.VIPTicketsLeft))
    ? parseInt(localStorage.VIPTicketsLeft)
    : 20,
  VVIPTicketsLeft: !isNaN(parseInt(localStorage.VVIPTicketsLeft))
    ? parseInt(localStorage.VVIPTicketsLeft)
    : 20,
};

export const aboutPageText = `Event Ticket Booking UI ‚Äì Open Source Practice Project üéüÔ∏è

Overview

This is a beginner-friendly yet practical Event Ticket Booking UI designed for developers to clone, explore, and build upon. The design focuses on a seamless, login-free ticket reservation flow, allowing users to book event tickets quickly and efficiently.

The project consists of a three-step ticket booking flow, and developers can extend it further by integrating payment solutions, user authentication (optional), and ticket validation systems.

Flow & Features

1Ô∏è‚É£ Ticket Selection
	‚Ä¢	Users can browse available tickets (Free & Paid).
	‚Ä¢	Ticket options are displayed in a list or card view.
	‚Ä¢	For Free Tickets ‚Üí Clicking ‚ÄúGet Free Ticket‚Äù proceeds to attendee details.
	‚Ä¢	For Paid Tickets ‚Üí Clicking ‚ÄúPurchase Ticket‚Äù would ideally open a payment modal.

2Ô∏è‚É£ Attendee Details Form
	‚Ä¢	Users input their Name, Email, and optional Phone Number.
	‚Ä¢	Profile picture upload option with preview functionality.
	‚Ä¢	Ticket summary is visible to ensure users review their details before submission.

3Ô∏è‚É£ Payment or Success Page
	‚Ä¢	If the ticket is free, the user is taken directly to the Ticket Confirmation Page.
	‚Ä¢	If the ticket is paid, developers can integrate Stripe, Paystack, or Flutterwave to process payments before showing the confirmation page.
	‚Ä¢	Upon successful booking, users should receive:
	‚Ä¢	A visual ticket preview with a unique QR Code.
	‚Ä¢	An option to download the ticket as PDF or save it to their device.
	‚Ä¢	An email confirmation containing ticket details.
How to Build This üöÄ

This UI can be implemented using:

üìå Frontend (Next.js or React)
	‚Ä¢	Component Breakdown:
	‚Ä¢	TicketCard.tsx ‚Üí Displays ticket details
	‚Ä¢	AttendeeForm.tsx ‚Üí Captures user details
	‚Ä¢	PaymentModal.tsx ‚Üí Handles payment processing
	‚Ä¢	SuccessScreen.tsx ‚Üí Shows the final ticket preview
	‚Ä¢	State Management: React‚Äôs Context API, Zustand, or Redux (if needed).
	‚Ä¢	File Handling: Users should be able to upload images (profile picture for ticket) using Firebase Storage, Cloudinary, or local preview with URL.createObjectURL().

üìå Backend (Optional)
	‚Ä¢	If persistence is required, a backend can be built using:
	‚Ä¢	Node.js & Express or Firebase Functions
	‚Ä¢	Database: MongoDB, PostgreSQL, or Firebase Firestore to store ticket records

üìå Payment Integration
	‚Ä¢	For paid events, developers should integrate:
	‚Ä¢	Stripe Checkout (for international transactions)
	‚Ä¢	Paystack or Flutterwave (for African users)
What You‚Äôll Learn üßë‚Äçüíª
	‚Ä¢	File handling & validation (profile picture uploads).
	‚Ä¢	Dynamic UI updates based on ticket selection.
	‚Ä¢	Persisting bookings using local state or a backend.
	‚Ä¢	Integrating payment gateways for ticket purchases.
	‚Ä¢	Generating & validating QR Codes for event check-in (Advanced).
Need Help? Reach Out! üí¨`;
